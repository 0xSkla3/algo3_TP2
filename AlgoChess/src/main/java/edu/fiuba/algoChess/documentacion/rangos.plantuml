@startuml

title __RANGOS's Class Diagram__\n

      interface edu.fiuba.algoChess.modelo.rangos.Rango {
          {abstract} + actualizaPiezasEnRango(Pieza):
          {abstract} + actualizaRangoInmediato(Pieza, Tablero): Rango
          {abstract} + actualizaRangoSoldado(Pieza, Tablero):
          {abstract} + darDeAltaBatallon(): Batallon
      }

      class edu.fiuba.algoChess.modelo.rangos.RangoCercano {
          ~ piezasEnRango : ArrayList<Pieza>
          - rangoCarcano : Map<Ubicacion, Celda>
          + actualizaPiezasEnRango(Pieza):
          + actualizaRangoInmediato(Pieza, Tablero): Rango
          + actualizaRangoSoldado(Pieza, Tablero):
          + darDeAltaBatallon(): Batallon
      }

      abstract class edu.fiuba.algoChess.modelo.rangos.RangoInmediato {
          # arriba : Celda
          # abajo : Celda
          # izquierda : Celda
          # derecha : Celda
          # actual : Celda
          ~ piezasEnRango : ArrayList<Pieza>
          + actualizaPiezasEnRango(Pieza):
          + actualizaRangoInmediato(Pieza, Tablero): Rango
          + darDeAltaBatallon(): Batallon
      }

      class edu.fiuba.algoChess.modelo.rangos.RangoSoldado {
          ~ obstaculos : ArrayList<Pieza>
          ~ soldadosEquipo : ArrayList<Pieza>
          + actualizaObstaculosInmediatos(Pieza): ArrayList<Pieza>
          + actualizaRangoSoldado(Pieza, Tablero):
          + darDeAltaBatallon() : Batallon
          - actualizaSoldadosCercanos(Pieza): ArrayList<Pieza>
      }

  edu.fiuba.algoChess.modelo.rangos.RangoCercano .up.|> edu.fiuba.algoChess.modelo.rangos.Rango
  edu.fiuba.algoChess.modelo.rangos.RangoInmediato .up.|> edu.fiuba.algoChess.modelo.rangos.Rango
  edu.fiuba.algoChess.modelo.rangos.RangoSoldado -up-|> edu.fiuba.algoChess.modelo.rangos.RangoInmediato

@enduml

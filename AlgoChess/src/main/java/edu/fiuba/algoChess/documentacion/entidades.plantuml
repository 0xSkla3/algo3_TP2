@startuml

title __ENTIDADES's Class Diagram__\n


      class edu.fiuba.algoChess.modelo.entidades.Catapulta {
          - ataque : AtaqueCatapulta
          + aumentarVida(double)
          + ejecutarComportamientoPorDistancia(DistanciaCercana, Pieza):
          + ejecutarComportamientoPorDistancia(DistanciaMedia, Pieza):
          + ejecutarComportamientoPorDistancia(DistanciaLejana, Pieza):
      }

      class edu.fiuba.algoChess.modelo.entidades.Curandero {
          - curacion : Curacion
          + atacar(Pieza)
          + curar(Pieza)
          + ejecutarComportamientoPorDistancia(DistanciaCercana, Pieza)
          + ejecutarComportamientoPorDistancia(DistanciaMedia, Pieza)
          + ejecutarComportamientoPorDistancia(DistanciaLejana, Pieza)
      }

      class edu.fiuba.algoChess.modelo.entidades.Jinete {
          - ataqueCercano : AtaqueNormal
          - ataqueMedio : AtaqueNormal
          - danioCercano : double
          - danioMedio : double
          - distanciaAReconocerEnTerreno : int
          + ataqueMedioInvalido()
          + ataqueMedioValido()
          + concretarAtaqueMedio(Pieza)
          + ejecutarComportamientoPorDistancia(DistanciaCercana, Pieza)
          + ejecutarComportamientoPorDistancia(DistanciaMedia, Pieza)
          + ejecutarComportamientoPorDistancia(DistanciaLejana, Pieza)
      }

      abstract class edu.fiuba.algoChess.modelo.entidades.Movible {
          + mover(Tablero, Ubicacion):
          + moverBatallon(Tablero, Ubicacion, Ubicacion, Ubicacion): Batallon
          + moverBatallonAbajo(Tablero): Batallon
          + moverBatallonArriba(Tablero): Batallon
          + moverBatallonDerecha(Tablero): Batallon
          + moverBatallonIzquierda(Tablero): Batallon
          + moverseALaDerecha(Tablero):
          + moverseALaIzquierda(Tablero):
          + moverseAbajo(Tablero):
          + moverseArriba(Tablero):
      }

      abstract class edu.fiuba.algoChess.modelo.entidades.Pieza {
          # costo : int
          # vida : Salud
          # ubicacion : Ubicacion
          # bando : Bando
          # bandoCeldaActual: Bando
          # rango : Rango
          # calculadorDistancia : distanciaRelativa
          + actualizaPiezasEnRango(Pieza):
          + actualizaRango(Tablero):
          + actualizaRangoCercano(Pieza, Tablero):
          + actualizaRangoInmediato(Pieza, Tablero): Rango
          + actualizaRangoMedio(Pieza, Tablero):
          + actualizaRangoSoldado(Pieza, Tablero):
          + agrupar(Pieza, Pieza, Pieza): Agrupable
          + aniadirPiezaAlStack(ArrayList<Pieza>): ArrayList<Pieza>
          + aniadirSoldadoAliadoStack(ArrayList<Pieza>, Pieza): ArrayList<Pieza>
          + aniadirTodoMenosSoldadoAlStack(ArrayList<Pieza>): ArrayList<Pieza>
          + atacar(Pieza):
          + aumentarVida(double)
          + crearBatallon(Pieza, Pieza, Pieza): Batallon
          + darDeAltaBatallon(): Batallon
          {abstract} + ejecutarComportamientoPorDistancia(DistanciaCercana, Pieza):
          {abstract} + ejecutarComportamientoPorDistancia(DistanciaMedia, Pieza):
          {abstract} + ejecutarComportamientoPorDistancia(DistanciaLejana, Pieza):
          + mover(Tablero, Ubicacion):
          + moverPiezaDeBatallon(Tablero, Ubicacion):
          + moverseALaDerecha(Tablero):
          + moverseALaIzquierda(Tablero):
          + moverseAbajo(Tablero):
          + moverseArriba(Tablero):
          + obtenerPiezaAbajo(): Pieza
          + obtenerPiezaArriba(): Pieza
          + obtenerPiezaDerecha(): Pieza
          + obtenerPiezaIzquierda(): Pieza
          + pisar(Celda, Pieza):
          + recibirAtaque(Ataque):
          + soldadosInmediatosSePuedenUnir(): boolean
          + unirABatallonDeSoldado(ArrayList<Pieza>): ArrayList<Pieza>
      }

      class edu.fiuba.algoChess.modelo.entidades.PiezaNull {
          + actualizaPiezasEnRango(Pieza):
          + actualizaRango(Tablero):
          + actualizaRangoCercano(Pieza, Tablero):
          + actualizaRangoInmediato(Pieza, Tablero): Rango
          + actualizaRangoMedio(Pieza, Tablero):
          + actualizaRangoSoldado(Pieza, Tablero):
          + aniadirPiezaAlStack(ArrayList<Pieza>): ArrayList<Pieza>
          + aniadirTodoMenosSoldadoAlStack(ArrayList<Pieza>): ArrayList<Pieza>
          + atacar(Pieza):
          + darDeAltaBatallon(): Batallon
          + ejecutarComportamientoPorDistancia(DistanciaCercana, Pieza):
          + ejecutarComportamientoPorDistancia(DistanciaMedia, Pieza):
          + ejecutarComportamientoPorDistancia(DistanciaLejana, Pieza):
          + moverPiezaDeBatallon(Tablero, Ubicacion):
          + pisar(Celda, Pieza):
          + recibirAtaque(Ataque):
          + soldadosInmediatosSePuedenUnir(): boolean
      }

      class edu.fiuba.algoChess.modelo.entidades.Soldado {
          - ataqueCercano : AtaqueNormal
          - danioCercano : int
          + actualizaRango(Tablero):
          + actualizaRangoInmediato(Pieza, Tablero): Rango
          + aniadirSoldadoAliadoStack(ArrayList<Pieza>, Pieza): ArrayList<Pieza>
          + aniadirTodoMenosSoldadoAlStack(ArrayList<Pieza>): ArrayList<Pieza>
          + darDeAltaBatallon(): Batallon
          + ejecutarComportamientoPorDistancia(DistanciaCercana, Pieza):
          + ejecutarComportamientoPorDistancia(DistanciaMedia, Pieza):
          + ejecutarComportamientoPorDistancia(DistanciaLejana, Pieza):
          + moverPiezaDeBatallon(Tablero, Ubicacion):
          + soldadosInmediatosSePuedenUnir(): boolean
          + unirABatallonDeSoldado(ArrayList<Pieza>): ArrayList<Pieza>
      }

  edu.fiuba.algoChess.modelo.entidades.Catapulta -up-|> edu.fiuba.algoChess.modelo.entidades.Pieza
  edu.fiuba.algoChess.modelo.entidades.Curandero -up-|> edu.fiuba.algoChess.modelo.entidades.Pieza
  edu.fiuba.algoChess.modelo.entidades.Jinete -up-|> edu.fiuba.algoChess.modelo.entidades.Pieza
  edu.fiuba.algoChess.modelo.entidades.Pieza -up-|> edu.fiuba.algoChess.modelo.entidades.Movible
  edu.fiuba.algoChess.modelo.entidades.PiezaNull -up-|> edu.fiuba.algoChess.modelo.entidades.Pieza
  edu.fiuba.algoChess.modelo.entidades.Soldado -up-|> edu.fiuba.algoChess.modelo.entidades.Pieza


@enduml
